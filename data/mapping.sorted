# Mapping tussen CGN en UD
# probeer het zo te doen dat de mapping functioneert als tagconversie en als query conversie
# dwz er zit voldoende informatie in voor hele tags features in combinatie om te zetten
# en ook zoveel mogelijk houvast om losse features in queries om te zetten
# zie ook http://universaldependencies.org/v2/postags.html voor de boundary issues

ud:AdpType=Comprep ↔ (cgn:feat.vztype=versm)
ud:AdpType=Post ↔ (cgn:feat.vztype=fin)
ud:AdpType=Prep ↔ (cgn:feat.vztype=init)

ud:Aspect=Imp ↔ (cgn:feat.wvorm=od)
ud:Aspect=Perf ↔ (cgn:feat.wvorm=vd)

ud:Case=Acc|Nom ↔ (cgn:feat.naamval=stan)
ud:Case=Acc ↔ (cgn:feat.naamval=obl)
ud:Case=Dat ↔ (cgn:feat.naamval=dat)
ud:Case=Gen ↔ (cgn:feat.naamval=gen)
ud:Case=Nom ↔ (cgn:feat.naamval=nomin)

ud:Definite=Def ↔ (cgn:feat.lwtype=bep ∧ cgn:pos=LID) ∨ (cgn:feat.vwtype=bep ∧ cgn:pos=VNW)
ud:Definite=Ind ↔ (cgn:feat.lwtype=onbep ∧ cgn:pos=LID) ∨ (cgn:feat.vwtype=onbep ∧ cgn:pos=VNW)

ud:Degree=Cmp ↔ (cgn:feat.graad=comp)
ud:Degree=Dim ↔ (cgn:feat.graad=dim)
ud:Degree=Pos ↔ (cgn:feat.graad=basis)
ud:Degree=Sup ↔ (cgn:feat.graad=sup)

ud:Gender=Com ↔ (cgn:feat.genus=zijd)
ud:Gender=Fem ↔ (cgn:feat.genus=fem) ∨ (cgn:feat.npagr=evf) ∨ (cgn:feat.persoon=2v|3v)
ud:Gender=Masc ↔ (cgn:feat.genus=masc) ∨ (cgn:feat.persoon=3m)
ud:Gender=Neut ↔ (cgn:feat.genus=onz) ∨ (cgn:feat.npagr=evon) ∨ (cgn:feat.graad=dim ∧ cgn:pos=N)

# CGN stopt conj en imp in de tijd

ud:Mood=Ind ↔ (cgn:feat.wvorm=pv ∧ (cgn:feat.pvtijd=tgw  ∨  cgn:feat.pvtijd=verl))
ud:Mood=Sub ↔ (cgn:feat.wvorm=pv ∧ cgn:feat.pvtijd=conj)
ud:Mood=Imp ↔ (cgn:feat.wvorm=pv ∧ cgn:feat.pvtijd=imp)

ud:NumType=Card ↔ (cgn:feat.numtype=hoofd)
ud:NumType=Ord ↔ (cgn:feat.numtype=rang)

ud:Number=Plur ↔ (cgn:feat.getal=mv)
ud:Number=Sing ↔ (cgn:feat.getal=ev ∨ cgn:feat.npagr=evon ∨ cgn:feat.npagr=evf)

ud:Person=1 ↔ cgn:feat.persoon=1
ud:Person=2 ↔ cgn:feat.persoon=2 ∨ cgn:feat.persoon=2v ∨ cgn:feat.persoon=2b
ud:Person=3 ↔ cgn:feat.persoon=3 ∨ cgn:feat.persoon=3p ∨ cgn:feat.persoon=3v ∨ cgn:feat.persoon=3m ∨ cgn:feat.persoon=3o ∨ cgn:feat.persoon=3

# introduceer voor die boolean ors op een feature automatisch een alias = a|b|c|... ?

ud:Polite=Inf ↔ cgn:feat.persoon=2v
ud:Polite=Pol → (cgn:feat.persoon=2b ∨ cgn:feat.pvagr=met-t)
cgn:feat.persoon=2b → ud:Polite=Pol

ud:Position=Free ↔ (cgn:feat.positie=vrij)
ud:Position=Nom ↔ (cgn:feat.positie=nom)
ud:Position=Postnom ↔ (cgn:feat.positie=postnom)
ud:Position=Prenom ↔ (cgn:feat.positie=prenom)

ud:Poss=Yes ↔ (cgn:pos=VNW ∧ cgn:feat.vwtype=bez)

ud:PronType=Art ↔ (cgn:pos=LID)
ud:PronType=Dem ↔ (cgn:feat.vwtype=aanw ∧ cgn:pos=VNW)
ud:PronType=Exc ↔ (cgn:feat.vwtype=excl ∧ cgn:pos=VNW)
ud:PronType=Ind ↔ (cgn:feat.lwtype=onbep ∧ cgn:pos=LID) ∨ (cgn:feat.vwtype=onbep ∧ cgn:pos=VNW)
ud:PronType=Int ↔ (cgn:feat.vwtype=vrag)
ud:PronType=NegTot ↔ (cgn:feat.lwtype=onbep ∧ cgn:lemma=geen)
ud:PronType=Prs  ↔ (cgn:feat.vwtype=pers)
ud:PronType=Rcp ↔ (cgn:feat.vwtype=recip)
ud:PronType=Rel ↔ (cgn:feat.vwtype=betr)
ud:PronType=Tot ↔ (cgn:feat.lwtype=onbep ∧ cgn:lemma=iedereen|ieder|al|alles|elk|elke)

ud:Reflex=Yes ↔ (cgn:feat.vwtype=refl) ∨ (cgn:feat.vwtype=pr)

ud:Tense=Past ↔  (cgn:feat.pvtijd=verl ∧ cgn:feat.wvorm=pv) ∨ cgn:feat.wvorm=vd
ud:Tense=Pres ↔ cgn:feat.pvtijd=tgw

ud:Variant=Long ↔ cgn:feat.status=vol
ud:Variant=Short ↔ cgn:feat.status=red

ud:VerbForm=Fin ↔ cgn:feat.wvorm=pv
ud:VerbForm=Inf ↔ cgn:feat.wvorm=inf
ud:VerbForm=Part ↔ cgn:feat.wvorm=od ∨ cgn:feat.wvorm=vd

### main part of speech

ud:pos=ADJ ↔ cgn:pos=ADJ
  ud:pos=ADJ ↔ gigant:pos=AA
ud:pos=ADP ↔ cgn:pos=VZ
  ud:pos=ADP ↔ gigant:pos=ADP
ud:pos=ADV ↔ cgn:pos=BW ∨ (cgn:pos=VNW ∧ cgn:feat.pdtype=adv-pron)
  ud:pos=ADV ↔ gigant:pos=ADV
# wat doen we met pdtype=grad (weinig, veel, etc...)

ud:pos=AUX → cgn:pos=WW
  ud:pos=AUX → gigant:pos=VRB

ud:pos=CCONJ ↔ cgn:pos=VG ∧ cgn:feat.conjtype=neven

ud:pos=DET ↔ cgn:pos=LID ∨ (cgn:pos=VNW ∧ cgn:feat.pdtype=det) ∨ (cgn:pos=VNW ∧ cgn:feat.positie=prenom)
ud:pos=INTJ ↔ cgn:pos=TSW
ud:pos=NOUN ↔ cgn:pos=N ∧ cgn:feat.ntype=soort
ud:pos=NUM ↔ cgn:pos=TW
ud:pos=PRON ↔ (cgn:pos=VNW ∧ cgn:feat.pdtype=pron) ∨ (cgn:pos=VNW ∧ (cgn:feat.positie=vrij ∨ cgn:feat.positie=nom))
#ud:pos=PROPN ↔ (cgn:pos=N ∧ cgn:feat.ntype=eigen) ∨ (cgn:feat.spectype=deeleigen)
ud:pos=PUNCT ↔ cgn:pos=LET
ud:pos=PROPN ↔ cgn:pos=SPEC ∧ cgn:feat.spectype=deeleigen
ud:pos=SCONJ ↔ cgn:pos=VG ∧ cgn:feat.conjtype=onder
ud:pos=SYM → cgn:pos=SPEC
ud:pos=VERB ↔ cgn:pos=WW
ud:pos=X → cgn:pos=SPEC

ud:pos=SCONJ|CCONJ ↔ ud:pos=SCONJ ∨ ud:pos=CCONJ

#### helaas zijn er wat cgn-interne implicaties nodig om de conversie op gang te krijgen

# mutual exclusions. 
# Zouden eigenlijk voor alles opgenomen moeten worden

¬(cgn:pos=N ∧ cgn:feat.ntype=eigen)
cgn:pos=N → cgn:feat.ntype=soort
¬(cgn:pos=VNW ∧ cgn:pos=LID)

# moet dit echt?

¬(cgn:feat.pvtijd=verl ∧ cgn:feat.pvtijd=imp)
¬(cgn:feat.pvtijd=verl ∧ cgn:feat.pvtijd=conj)
¬(cgn:feat.pvtijd=tgw ∧ cgn:feat.pvtijd=imp)
¬(cgn:feat.pvtijd=tgw ∧ cgn:feat.pvtijd=conj)

((¬cgn:feat.wvorm=vd) ∨ ¬cgn:feat.wvorm=od)
((¬cgn:feat.wvorm=pv) ∨ ¬cgn:feat.wvorm=od)
((¬cgn:feat.wvorm=vd) ∨ ¬cgn:feat.wvorm=pv)


# tagsetinterne implicaties

cgn:feat.vwtype=bep → cgn:pos=VNW
cgn:feat.vwtype=bez → cgn:pos=VNW
cgn:feat.vwtype=aanw → cgn:pos=VNW
cgn:feat.vwtype=vrag → cgn:pos=VNW
cgn:feat.vwtype=recip → cgn:pos=VNW
cgn:feat.vwtype=betr → cgn:pos=VNW
cgn:feat.vwtype=refl → cgn:pos=VNW
cgn:feat.vwtype=pr → cgn:pos=VNW
cgn:feat.vwtype=excl → cgn:pos=VNW
cgn:feat.vwtype=onbep → cgn:pos=VNW

cgn:feat.conjtype=onder → cgn:pos=VG
cgn:feat.conjtype=neven → cgn:pos=VG

cgn:feat.lwtype=bep → cgn:pos=LID
cgn:feat.lwtype=onbep → cgn:pos=LID

cgn:feat.ntype=soort → cgn:pos=N
cgn:feat.ntype=eigen → cgn:pos=N

cgn:feat.pdtype=det → cgn:pos=VNW
cgn:feat.pdtype=pron → cgn:pos=VNW
# let op, geen positie als pdtype=pron

(cgn:feat.pvtijd=tgw ∨ cgn:feat.pvtijd=verl ∨ cgn:feat.pvtijd=conj ∨ cgn:feat.pvtijd=imp) → cgn:feat.wvorm=pv
